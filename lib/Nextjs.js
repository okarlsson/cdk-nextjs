"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Nextjs = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = require("node:fs");
const os = require("os");
const path = require("path");
const constructs_1 = require("constructs");
const NextjsBuild_1 = require("./NextjsBuild");
const NextjsDistribution_1 = require("./NextjsDistribution");
const NextjsImage_1 = require("./NextjsImage");
const NextjsInvalidation_1 = require("./NextjsInvalidation");
const NextjsRevalidation_1 = require("./NextjsRevalidation");
const NextjsServer_1 = require("./NextjsServer");
const NextjsStaticAssets_1 = require("./NextjsStaticAssets");
/**
 * The `Nextjs` construct is a higher level construct that makes it easy to create a NextJS app.
 *
 * Your standalone server application will be bundled using o(utput tracing and will be deployed to a Lambda function.
 * Static assets will be deployed to an S3 bucket and served via CloudFront.
 * You must use Next.js 10.3.0 or newer.
 *
 * Please provide a `nextjsPath` to the Next.js app inside your project.
 *
 * @example
 * new Nextjs(this, "Web", {
 *   nextjsPath: path.resolve("packages/web"),
 * })
 */
class Nextjs extends constructs_1.Construct {
    /**
     * Where build-time assets for deployment are stored.
     */
    get tempBuildDir() {
        return this.props.tempBuildDir
            ? path.resolve(path.join(this.props.tempBuildDir, `nextjs-cdk-build-${this.node.id}-${this.node.addr.substring(0, 4)}`))
            : fs.mkdtempSync(path.join(os.tmpdir(), 'nextjs-cdk-build-'));
    }
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        // build nextjs app
        this.nextBuild = new NextjsBuild_1.NextjsBuild(this, id, { ...props, tempBuildDir: this.tempBuildDir });
        // deploy nextjs static assets to s3
        this.staticAssets = new NextjsStaticAssets_1.NextjsStaticAssets(this, 'StaticAssets', {
            bucket: props.defaults?.assetDeployment?.bucket,
            environment: props.environment,
            nextBuild: this.nextBuild,
            basePath: props.basePath,
        });
        this.serverFunction = new NextjsServer_1.NextjsServer(this, 'Server', {
            ...props,
            tempBuildDir: this.tempBuildDir,
            nextBuild: this.nextBuild,
            lambda: props.defaults?.lambda,
            staticAssetBucket: this.staticAssets.bucket,
        });
        // build image optimization
        this.imageOptimizationFunction = new NextjsImage_1.NextjsImage(this, 'ImgOptFn', {
            ...props,
            nextBuild: this.nextBuild,
            bucket: props.imageOptimizationBucket || this.bucket,
            lambdaOptions: props.defaults?.lambda,
        });
        // build revalidation queue and handler function
        this.revalidation = new NextjsRevalidation_1.NextjsRevalidation(this, 'Revalidation', {
            ...props,
            nextBuild: this.nextBuild,
            serverFunction: this.serverFunction,
        });
        this.distribution = new NextjsDistribution_1.NextjsDistribution(this, 'Distribution', {
            ...props,
            ...props.defaults?.distribution,
            staticAssetsBucket: this.staticAssets.bucket,
            tempBuildDir: this.tempBuildDir,
            nextBuild: this.nextBuild,
            serverFunction: this.serverFunction.lambdaFunction,
            imageOptFunction: this.imageOptimizationFunction,
        });
        if (!this.props.skipFullInvalidation) {
            new NextjsInvalidation_1.NextjsInvalidation(this, 'Invalidation', {
                distribution: this.distribution.distribution,
                dependencies: [], // [this.staticAssets, this.serverFunction, this.imageOptimizationFunction]
            });
        }
    }
    /**
     * URL of Next.js App.
     */
    get url() {
        const customDomain = this.distribution.customDomainName;
        return customDomain ? `https://${customDomain}` : this.distribution.url;
    }
    /**
     * Convenience method to access `Nextjs.staticAssets.bucket`.
     */
    get bucket() {
        return this.staticAssets.bucket;
    }
}
_a = JSII_RTTI_SYMBOL_1;
Nextjs[_a] = { fqn: "cdk-nextjs-standalone.Nextjs", version: "0.0.0" };
exports.Nextjs = Nextjs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmV4dGpzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL05leHRqcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhCQUE4QjtBQUM5Qix5QkFBeUI7QUFDekIsNkJBQTZCO0FBSzdCLDJDQUF1QztBQUV2QywrQ0FBNEM7QUFDNUMsNkRBQW1GO0FBQ25GLCtDQUE0QztBQUM1Qyw2REFBMEQ7QUFDMUQsNkRBQTBEO0FBQzFELGlEQUE4QztBQUM5Qyw2REFBbUY7QUE0RG5GOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFDSCxNQUFhLE1BQU8sU0FBUSxzQkFBUztJQTBCbkM7O09BRUc7SUFDSCxJQUFXLFlBQVk7UUFDckIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVk7WUFDNUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQ3pHO1lBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFVRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFZLEtBQWtCO1FBQ3BFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFEaUMsVUFBSyxHQUFMLEtBQUssQ0FBYTtRQUdwRSxtQkFBbUI7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHlCQUFXLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsS0FBSyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUUxRixvQ0FBb0M7UUFDcEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLHVDQUFrQixDQUFDLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDL0QsTUFBTSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsZUFBZSxFQUFFLE1BQU07WUFDL0MsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7U0FDekIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLDJCQUFZLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtZQUNyRCxHQUFHLEtBQUs7WUFDUixZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVk7WUFDL0IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLE1BQU0sRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU07WUFDOUIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNO1NBQzVDLENBQUMsQ0FBQztRQUNILDJCQUEyQjtRQUMzQixJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSx5QkFBVyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDakUsR0FBRyxLQUFLO1lBQ1IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLE1BQU0sRUFBRSxLQUFLLENBQUMsdUJBQXVCLElBQUksSUFBSSxDQUFDLE1BQU07WUFDcEQsYUFBYSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTTtTQUN0QyxDQUFDLENBQUM7UUFFSCxnREFBZ0Q7UUFDaEQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLHVDQUFrQixDQUFDLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDL0QsR0FBRyxLQUFLO1lBQ1IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztTQUNwQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksdUNBQWtCLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUMvRCxHQUFHLEtBQUs7WUFDUixHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsWUFBWTtZQUMvQixrQkFBa0IsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU07WUFDNUMsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQy9CLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjO1lBQ2xELGdCQUFnQixFQUFFLElBQUksQ0FBQyx5QkFBeUI7U0FDakQsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsb0JBQW9CLEVBQUU7WUFDcEMsSUFBSSx1Q0FBa0IsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFO2dCQUMzQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZO2dCQUM1QyxZQUFZLEVBQUUsRUFBRSxFQUFFLDJFQUEyRTthQUM5RixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsR0FBRztRQUNaLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUM7UUFDeEQsT0FBTyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDO0lBQzFFLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsTUFBTTtRQUNmLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7SUFDbEMsQ0FBQzs7OztBQWhIVSx3QkFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gJ25vZGU6ZnMnO1xuaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IERpc3RyaWJ1dGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1jbG91ZGZyb250JztcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IEZ1bmN0aW9uT3B0aW9ucyB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0ICogYXMgczMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQmFzZVNpdGVEb21haW5Qcm9wcywgTmV4dGpzQmFzZVByb3BzIH0gZnJvbSAnLi9OZXh0anNCYXNlJztcbmltcG9ydCB7IE5leHRqc0J1aWxkIH0gZnJvbSAnLi9OZXh0anNCdWlsZCc7XG5pbXBvcnQgeyBOZXh0anNEaXN0cmlidXRpb24sIE5leHRqc0Rpc3RyaWJ1dGlvblByb3BzIH0gZnJvbSAnLi9OZXh0anNEaXN0cmlidXRpb24nO1xuaW1wb3J0IHsgTmV4dGpzSW1hZ2UgfSBmcm9tICcuL05leHRqc0ltYWdlJztcbmltcG9ydCB7IE5leHRqc0ludmFsaWRhdGlvbiB9IGZyb20gJy4vTmV4dGpzSW52YWxpZGF0aW9uJztcbmltcG9ydCB7IE5leHRqc1JldmFsaWRhdGlvbiB9IGZyb20gJy4vTmV4dGpzUmV2YWxpZGF0aW9uJztcbmltcG9ydCB7IE5leHRqc1NlcnZlciB9IGZyb20gJy4vTmV4dGpzU2VydmVyJztcbmltcG9ydCB7IE5leHRqc1N0YXRpY0Fzc2V0cywgTmV4dGpzU3RhdGljQXNzZXRzUHJvcHMgfSBmcm9tICcuL05leHRqc1N0YXRpY0Fzc2V0cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmV4dGpzRG9tYWluUHJvcHMgZXh0ZW5kcyBCYXNlU2l0ZURvbWFpblByb3BzIHt9XG5cbi8qKlxuICogRGVmYXVsdHMgZm9yIGNyZWF0ZWQgcmVzb3VyY2VzLlxuICogV2h5IGBhbnlgPyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2F3cy9qc2lpL2lzc3Vlcy8yOTAxXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmV4dGpzRGVmYXVsdHNQcm9wcyB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBzdGF0aWMgZmlsZSBkZXBsb3ltZW50IHNldHRpbmdzLlxuICAgKi9cbiAgcmVhZG9ubHkgYXNzZXREZXBsb3ltZW50PzogTmV4dGpzU3RhdGljQXNzZXRzUHJvcHMgfCBhbnk7XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHNlcnZlciBsYW1iZGEgZnVuY3Rpb24gc2V0dGluZ3MuXG4gICAqL1xuICByZWFkb25seSBsYW1iZGE/OiBGdW5jdGlvbk9wdGlvbnM7XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIENsb3VkRnJvbnQgZGlzdHJpYnV0aW9uIHNldHRpbmdzLlxuICAgKlxuICAgKiBUaGVzZSBwcm9wZXJ0aWVzIHNob3VsZCBhbGwgYmUgb3B0aW9uYWwgYnV0IGNhbm5vdCBiZSBkdWUgdG8gYSBsaW1pdGF0aW9uIGluIGpzaWkuXG4gICAqL1xuICByZWFkb25seSBkaXN0cmlidXRpb24/OiBOZXh0anNEaXN0cmlidXRpb25Qcm9wcyB8IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOZXh0anNQcm9wcyBleHRlbmRzIE5leHRqc0Jhc2VQcm9wcyB7XG4gIC8qKlxuICAgKiBPcHRpb25hbCBTMyBCdWNrZXQgdG8gdXNlLCBkZWZhdWx0cyB0byBhc3NldHMgYnVja2V0XG4gICAqL1xuICByZWFkb25seSBpbWFnZU9wdGltaXphdGlvbkJ1Y2tldD86IHMzLklCdWNrZXQ7XG4gIC8qKlxuICAgKiBBbGxvd3MgeW91IHRvIG92ZXJyaWRlIGRlZmF1bHRzIGZvciB0aGUgcmVzb3VyY2VzIGNyZWF0ZWQgYnkgdGhpc1xuICAgKiBjb25zdHJ1Y3QuXG4gICAqL1xuICByZWFkb25seSBkZWZhdWx0cz86IE5leHRqc0RlZmF1bHRzUHJvcHM7XG4gIC8qKlxuICAgKiBTa2lwcyBydW5uaW5nIE5leHQuanMgYnVpbGQuIFVzZWZ1bCBpZiB5b3Ugd2FudCB0byBkZXBsb3kgYE5leHRqc2AgYnV0XG4gICAqIGhhdmVuJ3QgbWFkZSBhbnkgY2hhbmdlcyB0byBOZXh0LmpzIGFwcCBjb2RlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgc2tpcEJ1aWxkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIE9wdGlvbmFsIHZhbHVlIHRvIHByZWZpeCB0aGUgTmV4dC5qcyBzaXRlIHVuZGVyIGEgL3ByZWZpeCBwYXRoIG9uIENsb3VkRnJvbnQuXG4gICAqIFVzdWFsbHkgdXNlZCB3aGVuIHlvdSBkZXBsb3kgbXVsdGlwbGUgTmV4dC5qcyBzaXRlcyBvbiBzYW1lIGRvbWFpbiB1c2luZyAvc3ViLXBhdGhcbiAgICpcbiAgICogTm90ZSwgeW91J2xsIG5lZWQgdG8gc2V0IFtiYXNlUGF0aF0oaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvbmV4dC1jb25maWctanMvYmFzZVBhdGgpXG4gICAqIGluIHlvdXIgYG5leHQuY29uZmlnLnRzYCB0byB0aGlzIHZhbHVlIGFuZCBlbnN1cmUgYW55IGZpbGVzIGluIGBwdWJsaWNgXG4gICAqIGZvbGRlciBoYXZlIGNvcnJlY3QgcHJlZml4LlxuICAgKiBAZXhhbXBsZSBcIi9teS1iYXNlLXBhdGhcIlxuICAgKi9cbiAgcmVhZG9ubHkgYmFzZVBhdGg/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBPcHRpb25hbCBDbG91ZEZyb250IERpc3RyaWJ1dGlvbiBjcmVhdGVkIG91dHNpZGUgb2YgdGhpcyBjb25zdHJ1Y3QgdGhhdCB3aWxsXG4gICAqIGJlIHVzZWQgdG8gYWRkIE5leHQuanMgYmVoYXZpb3JzIGFuZCBvcmlnaW5zIG9udG8uIFVzZWZ1bCB3aXRoIGBiYXNlUGF0aGAuXG4gICAqL1xuICByZWFkb25seSBkaXN0cmlidXRpb24/OiBEaXN0cmlidXRpb247XG59XG5cbi8qKlxuICogVGhlIGBOZXh0anNgIGNvbnN0cnVjdCBpcyBhIGhpZ2hlciBsZXZlbCBjb25zdHJ1Y3QgdGhhdCBtYWtlcyBpdCBlYXN5IHRvIGNyZWF0ZSBhIE5leHRKUyBhcHAuXG4gKlxuICogWW91ciBzdGFuZGFsb25lIHNlcnZlciBhcHBsaWNhdGlvbiB3aWxsIGJlIGJ1bmRsZWQgdXNpbmcgbyh1dHB1dCB0cmFjaW5nIGFuZCB3aWxsIGJlIGRlcGxveWVkIHRvIGEgTGFtYmRhIGZ1bmN0aW9uLlxuICogU3RhdGljIGFzc2V0cyB3aWxsIGJlIGRlcGxveWVkIHRvIGFuIFMzIGJ1Y2tldCBhbmQgc2VydmVkIHZpYSBDbG91ZEZyb250LlxuICogWW91IG11c3QgdXNlIE5leHQuanMgMTAuMy4wIG9yIG5ld2VyLlxuICpcbiAqIFBsZWFzZSBwcm92aWRlIGEgYG5leHRqc1BhdGhgIHRvIHRoZSBOZXh0LmpzIGFwcCBpbnNpZGUgeW91ciBwcm9qZWN0LlxuICpcbiAqIEBleGFtcGxlXG4gKiBuZXcgTmV4dGpzKHRoaXMsIFwiV2ViXCIsIHtcbiAqICAgbmV4dGpzUGF0aDogcGF0aC5yZXNvbHZlKFwicGFja2FnZXMvd2ViXCIpLFxuICogfSlcbiAqL1xuZXhwb3J0IGNsYXNzIE5leHRqcyBleHRlbmRzIENvbnN0cnVjdCB7XG4gIC8qKlxuICAgKiBUaGUgbWFpbiBOZXh0SlMgc2VydmVyIGhhbmRsZXIgbGFtYmRhIGZ1bmN0aW9uLlxuICAgKi9cbiAgcHVibGljIHNlcnZlckZ1bmN0aW9uOiBOZXh0anNTZXJ2ZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBpbWFnZSBvcHRpbWl6YXRpb24gaGFuZGxlciBsYW1iZGEgZnVuY3Rpb24uXG4gICAqL1xuICBwdWJsaWMgaW1hZ2VPcHRpbWl6YXRpb25GdW5jdGlvbjogTmV4dGpzSW1hZ2U7XG5cbiAgLyoqXG4gICAqIEJ1aWx0IE5leHRKUyBwcm9qZWN0IG91dHB1dC5cbiAgICovXG4gIHB1YmxpYyBuZXh0QnVpbGQ6IE5leHRqc0J1aWxkO1xuXG4gIC8qKlxuICAgKiBBc3NldCBkZXBsb3ltZW50IHRvIFMzLlxuICAgKi9cbiAgcHVibGljIHN0YXRpY0Fzc2V0czogTmV4dGpzU3RhdGljQXNzZXRzO1xuXG4gIC8qKlxuICAgKiBDbG91ZEZyb250IGRpc3RyaWJ1dGlvbi5cbiAgICovXG4gIHB1YmxpYyBkaXN0cmlidXRpb246IE5leHRqc0Rpc3RyaWJ1dGlvbjtcblxuICAvKipcbiAgICogV2hlcmUgYnVpbGQtdGltZSBhc3NldHMgZm9yIGRlcGxveW1lbnQgYXJlIHN0b3JlZC5cbiAgICovXG4gIHB1YmxpYyBnZXQgdGVtcEJ1aWxkRGlyKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMudGVtcEJ1aWxkRGlyXG4gICAgICA/IHBhdGgucmVzb2x2ZShcbiAgICAgICAgICBwYXRoLmpvaW4odGhpcy5wcm9wcy50ZW1wQnVpbGREaXIsIGBuZXh0anMtY2RrLWJ1aWxkLSR7dGhpcy5ub2RlLmlkfS0ke3RoaXMubm9kZS5hZGRyLnN1YnN0cmluZygwLCA0KX1gKVxuICAgICAgICApXG4gICAgICA6IGZzLm1rZHRlbXBTeW5jKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ25leHRqcy1jZGstYnVpbGQtJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldmFsaWRhdGlvbiBoYW5kbGVyIGFuZCBxdWV1ZS5cbiAgICovXG4gIHB1YmxpYyByZXZhbGlkYXRpb246IE5leHRqc1JldmFsaWRhdGlvbjtcblxuICBwdWJsaWMgbGFtYmRhRnVuY3Rpb25VcmwhOiBsYW1iZGEuRnVuY3Rpb25Vcmw7XG4gIHB1YmxpYyBpbWFnZU9wdGltaXphdGlvbkxhbWJkYUZ1bmN0aW9uVXJsITogbGFtYmRhLkZ1bmN0aW9uVXJsO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3RlY3RlZCBwcm9wczogTmV4dGpzUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgLy8gYnVpbGQgbmV4dGpzIGFwcFxuICAgIHRoaXMubmV4dEJ1aWxkID0gbmV3IE5leHRqc0J1aWxkKHRoaXMsIGlkLCB7IC4uLnByb3BzLCB0ZW1wQnVpbGREaXI6IHRoaXMudGVtcEJ1aWxkRGlyIH0pO1xuXG4gICAgLy8gZGVwbG95IG5leHRqcyBzdGF0aWMgYXNzZXRzIHRvIHMzXG4gICAgdGhpcy5zdGF0aWNBc3NldHMgPSBuZXcgTmV4dGpzU3RhdGljQXNzZXRzKHRoaXMsICdTdGF0aWNBc3NldHMnLCB7XG4gICAgICBidWNrZXQ6IHByb3BzLmRlZmF1bHRzPy5hc3NldERlcGxveW1lbnQ/LmJ1Y2tldCxcbiAgICAgIGVudmlyb25tZW50OiBwcm9wcy5lbnZpcm9ubWVudCxcbiAgICAgIG5leHRCdWlsZDogdGhpcy5uZXh0QnVpbGQsXG4gICAgICBiYXNlUGF0aDogcHJvcHMuYmFzZVBhdGgsXG4gICAgfSk7XG5cbiAgICB0aGlzLnNlcnZlckZ1bmN0aW9uID0gbmV3IE5leHRqc1NlcnZlcih0aGlzLCAnU2VydmVyJywge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICB0ZW1wQnVpbGREaXI6IHRoaXMudGVtcEJ1aWxkRGlyLFxuICAgICAgbmV4dEJ1aWxkOiB0aGlzLm5leHRCdWlsZCxcbiAgICAgIGxhbWJkYTogcHJvcHMuZGVmYXVsdHM/LmxhbWJkYSxcbiAgICAgIHN0YXRpY0Fzc2V0QnVja2V0OiB0aGlzLnN0YXRpY0Fzc2V0cy5idWNrZXQsXG4gICAgfSk7XG4gICAgLy8gYnVpbGQgaW1hZ2Ugb3B0aW1pemF0aW9uXG4gICAgdGhpcy5pbWFnZU9wdGltaXphdGlvbkZ1bmN0aW9uID0gbmV3IE5leHRqc0ltYWdlKHRoaXMsICdJbWdPcHRGbicsIHtcbiAgICAgIC4uLnByb3BzLFxuICAgICAgbmV4dEJ1aWxkOiB0aGlzLm5leHRCdWlsZCxcbiAgICAgIGJ1Y2tldDogcHJvcHMuaW1hZ2VPcHRpbWl6YXRpb25CdWNrZXQgfHwgdGhpcy5idWNrZXQsXG4gICAgICBsYW1iZGFPcHRpb25zOiBwcm9wcy5kZWZhdWx0cz8ubGFtYmRhLFxuICAgIH0pO1xuXG4gICAgLy8gYnVpbGQgcmV2YWxpZGF0aW9uIHF1ZXVlIGFuZCBoYW5kbGVyIGZ1bmN0aW9uXG4gICAgdGhpcy5yZXZhbGlkYXRpb24gPSBuZXcgTmV4dGpzUmV2YWxpZGF0aW9uKHRoaXMsICdSZXZhbGlkYXRpb24nLCB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIG5leHRCdWlsZDogdGhpcy5uZXh0QnVpbGQsXG4gICAgICBzZXJ2ZXJGdW5jdGlvbjogdGhpcy5zZXJ2ZXJGdW5jdGlvbixcbiAgICB9KTtcblxuICAgIHRoaXMuZGlzdHJpYnV0aW9uID0gbmV3IE5leHRqc0Rpc3RyaWJ1dGlvbih0aGlzLCAnRGlzdHJpYnV0aW9uJywge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICAuLi5wcm9wcy5kZWZhdWx0cz8uZGlzdHJpYnV0aW9uLFxuICAgICAgc3RhdGljQXNzZXRzQnVja2V0OiB0aGlzLnN0YXRpY0Fzc2V0cy5idWNrZXQsXG4gICAgICB0ZW1wQnVpbGREaXI6IHRoaXMudGVtcEJ1aWxkRGlyLFxuICAgICAgbmV4dEJ1aWxkOiB0aGlzLm5leHRCdWlsZCxcbiAgICAgIHNlcnZlckZ1bmN0aW9uOiB0aGlzLnNlcnZlckZ1bmN0aW9uLmxhbWJkYUZ1bmN0aW9uLFxuICAgICAgaW1hZ2VPcHRGdW5jdGlvbjogdGhpcy5pbWFnZU9wdGltaXphdGlvbkZ1bmN0aW9uLFxuICAgIH0pO1xuXG4gICAgaWYgKCF0aGlzLnByb3BzLnNraXBGdWxsSW52YWxpZGF0aW9uKSB7XG4gICAgICBuZXcgTmV4dGpzSW52YWxpZGF0aW9uKHRoaXMsICdJbnZhbGlkYXRpb24nLCB7XG4gICAgICAgIGRpc3RyaWJ1dGlvbjogdGhpcy5kaXN0cmlidXRpb24uZGlzdHJpYnV0aW9uLFxuICAgICAgICBkZXBlbmRlbmNpZXM6IFtdLCAvLyBbdGhpcy5zdGF0aWNBc3NldHMsIHRoaXMuc2VydmVyRnVuY3Rpb24sIHRoaXMuaW1hZ2VPcHRpbWl6YXRpb25GdW5jdGlvbl1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVUkwgb2YgTmV4dC5qcyBBcHAuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHVybCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGN1c3RvbURvbWFpbiA9IHRoaXMuZGlzdHJpYnV0aW9uLmN1c3RvbURvbWFpbk5hbWU7XG4gICAgcmV0dXJuIGN1c3RvbURvbWFpbiA/IGBodHRwczovLyR7Y3VzdG9tRG9tYWlufWAgOiB0aGlzLmRpc3RyaWJ1dGlvbi51cmw7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRvIGFjY2VzcyBgTmV4dGpzLnN0YXRpY0Fzc2V0cy5idWNrZXRgLlxuICAgKi9cbiAgcHVibGljIGdldCBidWNrZXQoKTogczMuSUJ1Y2tldCB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGljQXNzZXRzLmJ1Y2tldDtcbiAgfVxufVxuIl19