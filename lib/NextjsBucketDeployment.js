"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NextjsBucketDeployment = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path = require("node:path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const constructs_1 = require("constructs");
const common_lambda_props_1 = require("./utils/common-lambda-props");
/**
 * Similar to CDK's `BucketDeployment` construct, but with a focus on replacing
 * template placeholders (i.e. environment variables) and configuring PUT
 * options like cache control.
 */
class NextjsBucketDeployment extends constructs_1.Construct {
    /**
     * Formats a string as a template value so custom resource knows to replace.
     */
    static getSubstitutionValue(v) {
        return `{{ ${v} }}`;
    }
    /**
     * Creates `substitutionConfig` an object by extracting unresolved tokens.
     */
    static getSubstitutionConfig(env) {
        const substitutionConfig = {};
        for (const [k, v] of Object.entries(env)) {
            if (aws_cdk_lib_1.Token.isUnresolved(v)) {
                substitutionConfig[NextjsBucketDeployment.getSubstitutionValue(k)] = v;
            }
        }
        return substitutionConfig;
    }
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.function = this.createFunction();
        this.createCustomResource(this.function.functionArn);
    }
    createFunction() {
        const fn = new aws_lambda_1.Function(this, 'Fn', {
            ...(0, common_lambda_props_1.getCommonFunctionProps)(this),
            code: aws_lambda_1.Code.fromAsset(path.resolve(__dirname, '..', 'assets', 'lambdas', 'nextjs-bucket-deployment')),
            handler: 'index.handler',
            timeout: aws_cdk_lib_1.Duration.minutes(5),
        });
        if (this.props.debug) {
            fn.addEnvironment('DEBUG', '1');
        }
        this.props.asset.grantRead(fn);
        this.props.destinationBucket.grantReadWrite(fn);
        return fn;
    }
    createCustomResource(serviceToken) {
        const properties = {
            sourceBucketName: this.props.asset.s3BucketName,
            sourceKeyPrefix: this.props.asset.s3ObjectKey,
            destinationBucketName: this.props.destinationBucket.bucketName,
            destinationKeyPrefix: this.props.destinationKeyPrefix,
            putConfig: this.props.putConfig,
            prune: this.props.prune,
            substitutionConfig: this.props.substitutionConfig,
            zip: this.props.zip,
        };
        return new aws_cdk_lib_1.CustomResource(this, 'CustomResource', {
            properties,
            resourceType: 'Custom::NextjsBucketDeployment',
            serviceToken,
        });
    }
}
_a = JSII_RTTI_SYMBOL_1;
NextjsBucketDeployment[_a] = { fqn: "cdk-nextjs-standalone.NextjsBucketDeployment", version: "0.0.0" };
exports.NextjsBucketDeployment = NextjsBucketDeployment;
//# sourceMappingURL=data:application/json;base64,