"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
/* eslint-disable import/no-extraneous-dependencies */
const node_fs_1 = require("node:fs");
const node_os_1 = require("node:os");
const node_path_1 = require("node:path");
const node_stream_1 = require("node:stream");
const client_s3_1 = require("@aws-sdk/client-s3");
// @ts-ignore jsii doesn't support esModuleInterop
// eslint-disable-next-line no-duplicate-imports
const jszip_1 = require("jszip");
const micromatch = require("micromatch");
const mime = require("mime-types");
const JSZip = jszip_1.default;
const s3 = new client_s3_1.S3Client({});
const handler = async (event, context) => {
    debug({ event });
    let responseStatus = 'SUCCESS';
    try {
        if (event.RequestType === 'Create' || event.RequestType === 'Update') {
            const props = getProperties(event);
            let tmpDir = '';
            const { assetsTmpDir, sourceDirPath, sourceZipFilePath } = initDirectories();
            tmpDir = assetsTmpDir;
            debug('Downloading zip');
            await downloadFile({
                bucket: props.sourceBucketName,
                key: props.sourceKeyPrefix,
                localDestinationPath: sourceZipFilePath,
            });
            debug('Extracting zip');
            await extractZip({ sourceZipFilePath, destinationDirPath: sourceDirPath });
            const filePaths = listFilePaths(sourceDirPath);
            if (props.substitutionConfig && Object.keys(props.substitutionConfig).length) {
                console.log('Replacing environment variables: ' + JSON.stringify(props.substitutionConfig));
                substitute({ config: props.substitutionConfig, filePaths });
            }
            if (props.prune) {
                debug('Emptying/pruning bucket: ' + props.destinationBucketName);
                await pruneBucket({ bucketName: props.destinationBucketName, keyPrefix: props.destinationKeyPrefix });
            }
            if (!props.zip) {
                debug('Uploading objects to: ' + props.destinationBucketName);
                await uploadObjects({
                    bucket: props.destinationBucketName,
                    keyPrefix: props.destinationKeyPrefix,
                    filePaths,
                    tmpDir: sourceDirPath,
                    putConfig: props.putConfig,
                });
            }
            else {
                debug('Uploading zip to: ' + props.destinationBucketName);
                const zipBuffer = await zipObjects({ tmpDir: sourceDirPath });
                await uploadZip({
                    zipBuffer,
                    bucket: props.destinationBucketName,
                    keyPrefix: props.destinationKeyPrefix,
                });
            }
            if (tmpDir.length) {
                debug('Removing temp directory');
                (0, node_fs_1.rmSync)(tmpDir, { force: true, recursive: true });
            }
            responseStatus = 'SUCCESS';
        }
    }
    catch (err) {
        console.error(err);
        responseStatus = 'FAILED';
    }
    await cfnResponse({ event, context, responseStatus });
};
exports.handler = handler;
function debug(value) {
    if (process.env.DEBUG)
        console.log(JSON.stringify(value, null, 2));
}
function getProperties(event) {
    const props = event.ResourceProperties;
    return {
        ...props,
        prune: props.prune === 'true',
        zip: props.zip === 'true',
    };
}
function initDirectories() {
    const assetsTmpDir = (0, node_fs_1.mkdtempSync)((0, node_path_1.resolve)((0, node_os_1.tmpdir)(), 'assets-'));
    const sourceZipDirPath = (0, node_path_1.resolve)(assetsTmpDir, 'source-zip');
    (0, node_fs_1.mkdirSync)(sourceZipDirPath);
    const sourceZipFilePath = (0, node_path_1.resolve)(sourceZipDirPath, 'temp.zip');
    // trailing slash expected by adm-zip's `extractAllTo` method
    const sourceDirPath = (0, node_path_1.resolve)(assetsTmpDir, 'source') + '/';
    (0, node_fs_1.mkdirSync)(sourceDirPath);
    return { assetsTmpDir, sourceZipFilePath, sourceDirPath };
}
async function downloadFile({ bucket, key, localDestinationPath, }) {
    const data = await s3.send(new client_s3_1.GetObjectCommand({ Bucket: bucket, Key: key }));
    return new Promise(async (resolve, reject) => {
        const body = data.Body;
        if (body instanceof node_stream_1.Readable) {
            const writeStream = (0, node_fs_1.createWriteStream)(localDestinationPath);
            body
                .pipe(writeStream)
                .on('error', (err) => reject(err))
                .on('close', () => resolve(null));
        }
    });
}
async function extractZip({ sourceZipFilePath, destinationDirPath, }) {
    const zipBuffer = (0, node_fs_1.readFileSync)(sourceZipFilePath);
    const archive = await JSZip.loadAsync(zipBuffer);
    for (const [zipRelativePath, zipObject] of Object.entries(archive.files)) {
        if (!zipObject.dir) {
            const absPath = (0, node_path_1.resolve)(destinationDirPath, zipRelativePath);
            const pathDirname = (0, node_path_1.dirname)(absPath);
            if (!(0, node_fs_1.existsSync)(pathDirname)) {
                (0, node_fs_1.mkdirSync)(pathDirname, { recursive: true });
            }
            const fileContents = await zipObject.async('nodebuffer');
            let isSymLink = false;
            const unixPermissions = zipObject?.unixPermissions;
            if (typeof unixPermissions === 'number') {
                // https://github.com/twolfson/grunt-zip/pull/52/files
                // eslint-disable-next-line no-bitwise
                isSymLink = (unixPermissions & 0xf000) === 0xa000;
            }
            if (isSymLink) {
                (0, node_fs_1.symlinkSync)(fileContents, absPath);
            }
            else {
                (0, node_fs_1.writeFileSync)(absPath, fileContents);
            }
        }
    }
}
/**
 * Given path of directory, returns array of all file paths within directory
 */
function listFilePaths(dirPath) {
    const filePaths = [];
    const directory = (0, node_fs_1.readdirSync)(dirPath, { withFileTypes: true });
    for (const d of directory) {
        const filePath = (0, node_path_1.resolve)(dirPath, d.name);
        if (d.isDirectory()) {
            filePaths.push(...listFilePaths(filePath));
        }
        else {
            filePaths.push(filePath);
        }
    }
    return filePaths;
}
function substitute({ filePaths, config }) {
    const findRegExp = new RegExp(Object.keys(config).join('|'), 'g');
    for (const filePath of filePaths) {
        if (filePath.includes('node_modules'))
            continue;
        const fileContents = (0, node_fs_1.readFileSync)(filePath, { encoding: 'utf8' });
        const newFileContents = fileContents.replace(findRegExp, (matched) => {
            const matchedEnvVar = config[matched];
            if (matchedEnvVar) {
                return matchedEnvVar;
            }
            else {
                console.warn(`Could not find matched value: ${matched} in environment object. Substituting ''`);
                return '';
            }
        });
        if (fileContents !== newFileContents) {
            (0, node_fs_1.writeFileSync)(filePath, newFileContents);
        }
    }
}
async function pruneBucket({ bucketName, keyPrefix }) {
    const deleteObjectPromises = [];
    let numObjectsDeleted = 0;
    let nextToken = undefined;
    do {
        const cmd = { Bucket: bucketName, Prefix: keyPrefix };
        if (nextToken) {
            cmd.ContinuationToken = nextToken;
        }
        const res = await s3.send(new client_s3_1.ListObjectsV2Command(cmd));
        const contents = res.Contents;
        nextToken = res.NextContinuationToken;
        if (contents?.length) {
            const objects = contents?.map((o) => ({ Key: o.Key }));
            numObjectsDeleted += objects?.length;
            deleteObjectPromises.push(s3.send(new client_s3_1.DeleteObjectsCommand({
                Bucket: bucketName,
                Delete: { Objects: objects },
            })));
        }
    } while (nextToken);
    await Promise.all(deleteObjectPromises);
    console.log(`Number of objects deleted for bucket ${bucketName}: ${numObjectsDeleted}`);
}
function uploadObjects({ bucket, keyPrefix, filePaths, tmpDir, putConfig = {}, }) {
    const putObjectInputs = filePaths.map((path) => {
        const contentType = mime.lookup(path) || undefined;
        const putObjectOptions = getPutObjectOptions({ path, putConfig });
        const keyPaths = [];
        if (keyPrefix)
            keyPaths.push(keyPrefix);
        keyPaths.push((0, node_path_1.relative)(tmpDir, path));
        return {
            ContentType: contentType,
            ...putObjectOptions,
            Bucket: bucket,
            // .slice(1) to remove leading slash b/c s3 will create top level / folder
            Key: (0, node_path_1.join)(...keyPaths),
            Body: (0, node_fs_1.createReadStream)(path),
        };
    });
    return Promise.all(putObjectInputs.map((input) => s3.send(new client_s3_1.PutObjectCommand(input))));
}
/**
 * Zips objects taking into account symlinks
 * @see https://github.com/Stuk/jszip/issues/386#issuecomment-634773343
 */
function zipObjects({ tmpDir }) {
    const zip = new JSZip();
    const filePaths = listFilePaths(tmpDir);
    for (const filePath of filePaths) {
        const relativePath = (0, node_path_1.relative)(tmpDir, filePath);
        const stat = (0, node_fs_1.lstatSync)(filePath);
        if (stat.isSymbolicLink()) {
            zip.file(relativePath, (0, node_fs_1.readlinkSync)(filePath), {
                dir: stat.isDirectory(),
                unixPermissions: parseInt('120755', 8),
            });
        }
        else {
            zip.file(relativePath, (0, node_fs_1.readFileSync)(filePath), { dir: stat.isDirectory(), unixPermissions: stat.mode });
        }
    }
    return zip.generateAsync({
        type: 'nodebuffer',
        platform: 'UNIX',
        compression: 'STORE',
    });
}
async function uploadZip({ bucket, keyPrefix, zipBuffer, }) {
    return s3.send(new client_s3_1.PutObjectCommand({
        Bucket: bucket,
        Key: keyPrefix,
        Body: zipBuffer,
        ContentType: 'application/zip',
    }));
}
function getPutObjectOptions({ path, putConfig = {}, }) {
    let putObjectOptions = {};
    for (const [key, value] of Object.entries(putConfig)) {
        if (micromatch.isMatch(path, key)) {
            putObjectOptions = { ...putObjectOptions, ...value };
        }
    }
    return putObjectOptions;
}
/**
 * Inspired by: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html
 */
function cfnResponse(props) {
    const body = JSON.stringify({
        Status: props.responseStatus,
        Reason: 'See the details in CloudWatch Log Stream: ' + props.context.logStreamName,
        PhysicalResourceId: props.physicalResourceId || props.context.logStreamName,
        StackId: props.event.StackId,
        RequestId: props.event.RequestId,
        LogicalResourceId: props.event.LogicalResourceId,
        Data: props.responseData,
    });
    return fetch(props.event.ResponseURL, {
        method: 'PUT',
        body,
        headers: { 'content-type': '', 'content-length': body.length.toString() },
    });
}
//# sourceMappingURL=data:application/json;base64,